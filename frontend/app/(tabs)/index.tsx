// App.js –≤ –ø–∞–ø–∫–µ frontend

import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, Button, ScrollView, ActivityIndicator, Alert, Platform } from 'react-native';

// --- –í–ê–ñ–ù–û! –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ê–î–†–ï–° –ù–ê –í–ê–® URL –û–¢ NGROK ---
const API_URL = 'https://tumulose-leora-unsynthetically.ngrok-free.dev' 

export default function App() {
  const [age, setAge] = useState('');
  const [weight, setWeight] = useState('');
  const [height, setHeight] = useState('');
  const [goal, setGoal] = useState('');
  const [activityLevel, setActivityLevel] = useState('');
  const [recommendation, setRecommendation] = useState('');
  const [loading, setLoading] = useState(false);
  
  const handleGenerate = async () => {
    if (!age || !weight || !height || !goal || !activityLevel) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    setRecommendation('');

    try {
      const response = await fetch(`${API_URL}/generate-recommendation`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          age: parseInt(age),
          weight: parseFloat(weight),
          height: parseInt(height),
          goal: goal,
          activity_level: activityLevel,
        }),
      });

      const data = await response.json();

      if (response.ok && data.recommendation) {
        setRecommendation(data.recommendation);
      } else {
        Alert.alert('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (error) {
      console.error(error);
      Alert.alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ngrok –∑–∞–ø—É—â–µ–Ω –∏ URL –≤–µ—Ä–Ω—ã–π.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>ü§ñ AI Fitness Coach</Text>
      
      <TextInput placeholder="–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)" style={styles.input} value={age} onChangeText={setAge} keyboardType="numeric" />
      <TextInput placeholder="–í–µ—Å (–∫–≥)" style={styles.input} value={weight} onChangeText={setWeight} keyboardType="numeric" />
      <TextInput placeholder="–†–æ—Å—Ç (—Å–º)" style={styles.input} value={height} onChangeText={setHeight} keyboardType="numeric" />
      <TextInput placeholder="–í–∞—à–∞ —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ö—É–¥–µ—Ç—å)" style={styles.input} value={goal} onChangeText={setGoal} />
      <TextInput placeholder="–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–∏–¥—è—á–∏–π, –∞–∫—Ç–∏–≤–Ω—ã–π)" style={styles.input} value={activityLevel} onChangeText={setActivityLevel} />

      <Button title={loading ? "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"} onPress={handleGenerate} disabled={loading} />

      {loading && <ActivityIndicator size="large" color="#007AFF" style={styles.loader} />}
      
      {recommendation && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultTitle}>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:</Text>
          <Text style={styles.resultText}>{recommendation}</Text>
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    paddingTop: Platform.OS === 'android' ? 40 : 60,
    backgroundColor: '#f5f5f5',
    flexGrow: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 30,
    color: '#333',
  },
  input: {
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderRadius: 8,
    marginBottom: 15,
    fontSize: 16,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  loader: {
    marginTop: 20,
  },
  resultContainer: {
    marginTop: 30,
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 20,
    borderWidth: 1,
    borderColor: '#ddd',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  resultTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333',
  },
  resultText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#555',
  },
});